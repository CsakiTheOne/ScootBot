import Bot.Companion.makeRemovable
import Bot.Companion.simplify
import com.google.gson.Gson
import extra.*
import net.dv8tion.jda.api.EmbedBuilder
import net.dv8tion.jda.api.OnlineStatus
import net.dv8tion.jda.api.entities.Activity
import net.dv8tion.jda.api.entities.Message
import net.dv8tion.jda.api.events.message.react.MessageReactionAddEvent
import java.awt.Color
import java.io.File
import java.util.*
import javax.script.ScriptEngine
import javax.script.ScriptEngineManager
import kotlin.concurrent.timerTask

lateinit var data: Data
lateinit var bot: Bot
var autoActivity = true
var tags = mutableSetOf<String>()

var lastVibeCommand = "m√©g senki sem k√©rte"
var hangmanGames = mutableListOf<Hangman>()
var numGuesserGames = mutableListOf<NumGuesser>()

fun main() {
    data = Data.load()
    bot = Bot(Secret.getToken("start"))
    Data.logClear()
    Data.log("Main", "----- BOT STARTED -----")

    setHelp()
    setAdminCommands()
    setBasicCommands()
    setBasicTriggers()
    setClickerGame()
    setHangmanGame()
    setNumGuesserGame()

    Timer().scheduleAtFixedRate(timerTask {
        if (!autoActivity) return@timerTask
        val activities = listOf(
            Activity.playing("${bot.getSelf().jda.guilds.size} szerveren"),
            Activity.playing("HealTogether"),
            Activity.playing("Minecraft"),
            Activity.playing("Terraria (k√∂sz√∂n√∂m @Krey)"),
            Activity.playing("No Man's Sky"),
            Activity.playing("Random Bot"),
            Activity.playing("Sonic Mania"),
            Activity.listening(".help"),
            Activity.listening("Emerald Hill Zone"),
            Activity.listening("Fist Bump"),
            Activity.listening("Lifelight - AmaLee"),
            Activity.listening("Thunderstruck - AC/DC"),
            Activity.listening("TheFatRat"),
            Activity.listening("Lindsey Stirling"),
            Activity.watching("Disenchantment"),
            Activity.watching("TikTok: @csakivevo"),
            Activity.watching("Technoblade trolling Skeppy"),
            Activity.watching("Minecraft stream online √≥r√°n"),
            Activity.watching("Unusual Memes"),
            Activity.watching("Mr. Robot"),
            Activity.watching("üüß‚¨õ"),
        )
        bot.getSelf().jda.presence.activity = activities.random()
        Data.log("Activity manager", bot.getSelf().jda.presence.activity.toString())
    }, 3000L, 1000 * 60 * 5)
}

fun setHelp() {
    bot.commands.add(Command("help admin", "") {
        val helpMessage = "**Parancsok (mindegyik el√© `${bot.prefix}` vagy sz√≥l√≠tsd meg Gomb√≥cot):**\n" +
                bot.commands.filter { c -> c.isAdminOnly }.joinToString("\n")
        it.channel.sendMessage(
            EmbedBuilder()
                .setColor(Color(0, 128, 255))
                .setTitle("Gomb√≥c seg√≠ts√©g")
                .setDescription(helpMessage)
                .build()
        ).queue { msg -> msg.makeRemovable() }
    }.setIsAdminOnly(true))

    bot.commands.add(Command("help j√°t√©k", "n√©zd meg milyen j√°t√©kokat j√°tszhatsz") {
        val helpMessage = "**J√°t√©kok (mindegyik el√© `${bot.prefix}` vagy sz√≥l√≠tsd meg Gomb√≥cot):**\n" +
                bot.commands.filter { c -> c.tags.contains(Command.TAG_GAME) }.joinToString("\n")
        it.channel.sendMessage(
            EmbedBuilder()
                .setColor(Color(0, 128, 255))
                .setTitle("Gomb√≥c j√°t√©kok")
                .setDescription(helpMessage)
                .build()
        ).queue { msg -> msg.makeRemovable() }
    })

    bot.commands.add(Command("help", "√Å√Å√Å√Å√Å√Å√Å√Å√Å!!!") {
        val helpMessage = "**Parancsok (mindegyik el√© `${bot.prefix}` vagy sz√≥l√≠tsd meg Gomb√≥cot):**\n" +
                bot.commands.filter { c -> !c.isAdminOnly }.joinToString("\n")
        it.channel.sendMessage(
            EmbedBuilder()
                .setColor(Color(0, 128, 255))
                .setTitle("Gomb√≥c seg√≠ts√©g")
                .setDescription(helpMessage)
                .build()
        ).queue { msg -> msg.makeRemovable() }
    })

    bot.commands.add(Command("custom", "saj√°t parancsokat alkothatsz") {
        if (it.contentRaw == ".custom") {
            val helpMessage = "√öj parancs: `.custom add <parancs>; [kimenet]; [egy√©b be√°ll√≠t√°sok]`\n" +
                    "T√∂rl√©s: `.custom delete <parancs>`\nBe√°ll√≠t√°sok: minden emoji egy be√°ll√≠t√°s\n" +
                    "‚ùå: t√∂r√∂lhet≈ë √ºzenet\n\n${data.customCommands.joinToString { cc -> cc.command }}\n" +
                    "**A saj√°t parancsok prefixe:** `..`"
            it.channel.sendMessage(
                EmbedBuilder()
                    .setColor(Color(0, 128, 255))
                    .setTitle("Saj√°t parancsok")
                    .setDescription(helpMessage)
                    .build()
            ).queue { msg -> msg.makeRemovable() }
        }
        else if (it.contentRaw.startsWith(".custom add")) {
            val params = it.contentRaw.removePrefix(".custom add ").split(";").map { param -> param.trim() }
            if (data.customCommands.any { cc -> cc.command == params[0] }) {
                it.channel.sendMessage("M√°r van ilyen parancs!").queue { msg -> msg.makeRemovable() }
            }
            else {
                when (params.size) {
                    3 -> data.customCommands.add(CustomCommand(params[0], params[1], params[2].contains("‚ùå")))
                    2 -> data.customCommands.add(CustomCommand(params[0], params[1], false))
                    1 -> data.customCommands.add(CustomCommand(params[0], "Ez a parancs nem csin√°l semmit.", true))
                }
                data.save()
                if (params.size < 4) it.channel.sendMessage("√öj parancs hozz√°adva ‚úÖ").queue { msg -> msg.makeRemovable() }
            }
        }
        else if (it.contentRaw.startsWith(".custom delete")) {
            data.customCommands.removeIf { cc -> cc.command == it.contentRaw.removePrefix(".custom delete ") }
            data.save()
            it.channel.sendMessage("Parancs t√∂r√∂lve ‚úÖ").queue { msg -> msg.makeRemovable() }
        }
    })
}

fun setAdminCommands() {
    bot.commands.add(Command("status offline", "offline-ra √°ll√≠tja a botot") {
        bot.getSelf().jda.presence.setStatus(OnlineStatus.OFFLINE)
        println("Status set to ${bot.getSelf().jda.presence.status.name}")
    }.setIsAdminOnly(true))

    bot.commands.add(Command("activity", "bot √°llapot √°ll√≠t√°s") {
        if (it.contentRaw.contains("auto")) {
            autoActivity = true
        }
        else {
            autoActivity = false
            val activityType = it.contentRaw.removePrefix(".activity ").split(' ')[0]
            bot.getSelf().jda.presence.activity = when (activityType) {
                "play" -> Activity.playing(it.contentRaw.substring(15))
                "watch" -> Activity.watching(it.contentRaw.substring(16))
                "stream" -> Activity.streaming(it.contentRaw.substring(17), it.contentRaw.substringAfter("URL="))
                "listen" -> Activity.listening(it.contentRaw.substring(17))
                else -> Activity.playing(it.contentRaw.substring(10))
            }
        }
    }.setIsAdminOnly(true))

    bot.commands.add(Command("guilds", "szerverek mutat√°sa") {
        val guilds = if (it.contentRaw == ".guilds") bot.getSelf().jda.guilds else bot.getSelf().jda.guilds.filter { g -> g.name.toLowerCase().contains(it.contentRaw.removePrefix(".guilds ")) }
        for (guild in guilds) {
            guild.loadMembers().onSuccess { members ->
                val bots = members.filter { m -> m.user.isBot }
                val humans = members.filter { m -> !m.user.isBot }
                val humansTextRaw = humans.joinToString { h -> h.user.asTag }
                val humansText = if (humansTextRaw.length < 1500) "\n$humansTextRaw" else ""
                it.channel.sendMessage(
                    "**${guild.name}** by ${guild.owner?.user?.asTag}\n```\nEmberek: ${humans.size} Botok: ${bots.size}$humansText\n```"
                ).queue { msg -> msg.makeRemovable() }
            }
        }
    }.setIsAdminOnly(true))

    bot.commands.add(Command("diary", "napl√≥z√≥ szoba be√°ll√≠t√°sa") {
        data.diaryChannel = SimpleChannel(it.guild.id, it.channel.id)
        data.save()
        data.diary(bot.getSelf().jda, "Napl√≥z√°s helye be√°ll√≠tva ‚úî") { msg -> msg.makeRemovable() }
    }.setIsAdminOnly(true))

    bot.commands.add(Command("log read", "r√©szletes napl√≥ olvas√°sa") {
        it.channel.sendMessage("```\n" + Data.logRead() + "\n```").queue { msg -> msg.makeRemovable() }
    }.setIsAdminOnly(true))

    bot.commands.add(Command("canstop", "biztons√°gos le√°ll√≠t√°s ellen≈ërz√©se") {
        val text = "${hangmanGames.size} akaszt√≥fa √©s ${numGuesserGames.size} sz√°mkital√°l√≥ j√°t√©k van folyamatban. " +
                "Utols√≥ vibe parancs: $lastVibeCommand"
        it.channel.sendMessage(text).queue()
    }.setIsAdminOnly(true))

    bot.commands.add(Command("clear", "utols√≥ √ºzenetek t√∂rl√©se") {
        val count = it.contentRaw.removePrefix(".clear ").toInt() + 1
        bot.getSelf().jda.presence.setStatus(OnlineStatus.DO_NOT_DISTURB)
        it.channel.history.retrievePast(count).queue { msgs ->
            for (i in 0 until msgs.size) {
                msgs[i].delete().queue {
                    println("[CLEAR]: Deleted message ${i}/${msgs.size - 1}")
                    if (i >= msgs.size - 1) {
                        bot.getSelf().jda.presence.setStatus(OnlineStatus.ONLINE)
                    }
                }
            }
        }
    }.setIsAdminOnly(true))
}

fun setBasicCommands() {
    bot.commands.add(Command("ping", "üèì") {
        it.channel.sendMessage(":ping_pong:").queue { msg -> msg.makeRemovable() }
    })

    bot.commands.add(Command("invite", "h√≠vj meg a saj√°t szerveredre") {
        it.channel.sendMessage("<https://discord.com/oauth2/authorize?client_id=783672257347715123&scope=bot&permissions=8>").queue { msg -> msg.makeRemovable() }
    })

    bot.commands.add(Command("tagok", "h√°ny ember van ezen a szerveren?") {
        it.guild.loadMembers().onSuccess { members ->
            val csakiStatus = members.firstOrNull { m -> m.id == Data.admins[0].id }?.onlineStatus ?: OnlineStatus.UNKNOWN
            it.channel.sendMessage(
                EmbedBuilder()
                    .setTitle("Szerver tagok (${members.size})")
                    .setDescription(
                        "üü¢ online: ${members.filter { m -> m.onlineStatus == OnlineStatus.ONLINE }.size}\n" +
                        "üü° t√©tlen: ${members.filter { m -> m.onlineStatus == OnlineStatus.IDLE }.size}\n" +
                        "üî¥ elfoglalt: ${members.filter { m -> m.onlineStatus == OnlineStatus.DO_NOT_DISTURB }.size}\n" +
                        "üì° offline: ${members.filter { m -> m.onlineStatus == OnlineStatus.OFFLINE }.size}\n" +
                        "ü§ñ bot: ${members.filter { m -> m.user.isBot }.size}\n" +
                        "Szerver tulaj (${it.guild.owner?.user?.name}): ${it.guild.owner?.onlineStatus}\n" +
                        "Gomb√≥c tulaj (${Data.admins[0].name}): $csakiStatus"
                    )
                    .build()
            ).queue { msg -> msg.makeRemovable() }
        }
    })

    bot.commands.add(Command("mondd", "ki tudsz mondatni velem valamit") {
        if (Data.admins.any { admin -> admin.id == it.author.id }) {
            it.channel.sendMessage(it.contentRaw.removePrefix(".mondd ")).queue()
        }
        else {
            it.channel.sendMessage("*${it.contentRaw.removePrefix(".mondd ")}*").queue()
        }
    })

    bot.commands.add(Command("szavaz√°s", "√©n egy demokratikusan megv√°lasztott bot vagyok") {
        if (it.contentRaw == ".szavaz√°s") {
            it.channel.sendMessage(
                "Szavaz√°s haszn√°lata: `.szavaz√°s <k√©rd√©s>; <emoji> <v√°lasz>; <emoji2> <v√°lasz2>`\n" +
                    "P√©ld√°ul: `.szavaz√°s Hogy vagy?; üëç J√≥l!; üëé Nem a legjobb.`"
            ).queue { msg -> msg.makeRemovable() }
        }
        else {
            val params = it.contentRaw.removePrefix(".szavaz√°s ").split(';').map { r -> r.trim() }
            var options = ""
            for (i in 1 until params.size) {
                options += "${params[i]}\n"
            }
            it.channel.sendMessage(
                EmbedBuilder()
                    .setTitle(params[0])
                    .setDescription(options)
                    .build()
            ).queue { poll ->
                for (i in 1 until params.size) {
                    poll.addReaction(params[i].split(' ')[0]).queue()
                }
            }
        }
    })

    bot.commands.add(Command("szegz", "nagyon romi") {
        val userFrom = it.author.asMention
        val userTo = it.contentRaw.split(' ')[1]
        if (it.textChannel.isNSFW) {
            it.channel.sendMessage("$userFrom megszegzeli ≈ët: $userTo").queue { msg ->
                msg.addReaction(listOf("‚ù§Ô∏è", "\uD83D\uDE0F", "\uD83D\uDE1C", "\uD83D\uDE2E").random()).queue()
            }
        }
        else {
            it.channel.sendMessage("$userFrom, menj √°t egy nsfw szob√°ba $userTo t√°rsaddal egy√ºtt.").queue()
        }
    })

    bot.commands.add(Command("gift", "k√ºldj aj√°nd√©kot a bar√°taidnak") {
        it.channel.sendMessage(
            EmbedBuilder()
                .setTitle("A wild gift appeared", "https://youtu.be/dQw4w9WgXcQ")
                .setThumbnail("https://static.wikia.nocookie.net/badcreepypasta/images/5/5e/Tumblr_966cc5d6fb3d9ef359cc10f994e26785_e24e7c68_640.png/revision/latest/scale-to-width-down/340?cb=20200229232309")
                .setDescription("```\n     Choccy Milk     \n```")
                .setColor(Color(199, 158, 120))
                .build()
        ).queue()
    })

    bot.commands.add(Command("matek", "√≠rj be egy m≈±veletet √©s kisz√°molom neked") {
        if (it.contentRaw == ".matek") {
            it.channel.sendMessage("√çgy haszn√°ld a parancsot: `.matek <m≈±velet>`\nP√©ld√°ul: `.matek 2 + 2`")
                .queue { msg -> msg.makeRemovable() }
        }
        else {
            val jsMathMap = hashMapOf(
                "sin" to "Math.sin", "cos" to "Math.cos", "tan" to "Math.tan", "pi" to "Math.PI", "sqrt" to "Math.sqrt",
                "random" to "Math.random()", "rdm" to "Math.random()", "pow" to "Math.pow", "abs" to "Math.abs"
            )
            val engine: ScriptEngine = ScriptEngineManager().getEngineByName("JavaScript")
            val inputRaw = it.contentRaw.removePrefix(".matek ")
            var input = it.contentRaw.removePrefix(".matek ")
            for (pair in jsMathMap) {
                input = input.replace(pair.key, pair.value)
            }
            val ans = engine.eval(input) as Number
            it.channel.sendMessage("$inputRaw = $ans").queue { msg -> msg.makeRemovable() }
        }
    })

    bot.commands.add(Command("f√ºggv√©ny", "tudok f√ºggv√©nyt √°br√°zolni") {
        if (it.contentRaw == ".f√ºggv√©ny") {
            it.channel.sendMessage("√çgy haszn√°ld a parancsot: `.f√ºggv√©ny <f√ºggv√©ny teste>; <tartom√°ny>` " +
                    "P√©ld√°ul: `.f√ºggv√©ny abs(x - 1) + 2; 5`\n").queue { msg -> msg.makeRemovable() }
        }
        else {
            val jsMathMap = hashMapOf(
                "sin" to "Math.sin", "cos" to "Math.cos", "tan" to "Math.tan", "pi" to "Math.PI", "sqrt" to "Math.sqrt",
                "random" to "Math.random()", "rdm" to "Math.random()", "pow" to "Math.pow", "abs" to "Math.abs"
            )
            val engine: ScriptEngine = ScriptEngineManager().getEngineByName("JavaScript")
            val inputRaw = it.contentRaw.removePrefix(".f√ºggv√©ny ").split(';')[0].trim()
            var input = inputRaw
            val checkRange = it.contentRaw.split(';')[1].trim().toInt()
            for (pair in jsMathMap) {
                input = input.replace(pair.key, pair.value)
            }
            val f = mutableMapOf<Int, Float>()
            val v = mutableListOf<Float>()
            for (i in -checkRange..checkRange) {
                val x = (engine.eval(input.replace("x", i.toString())) as Number).toFloat()
                v.add(x)
                f[i] = x
            }
            var graph = ""
            for (y in -checkRange..checkRange) {
                for (x in -checkRange..checkRange) {
                    graph += if (f[x]?.toInt() ?: 0 == -y) "‚ñà‚ñà"
                    else if (y == 0) "--"
                    else if (x == 0) " |"
                    else "  "
                }
                graph += "\n"
            }
            val ans = f.toString()
            it.channel.sendMessage("f(x) = $inputRaw\n```\n$ans\n$graph\n```").queue { msg -> msg.makeRemovable() }
        }
    })

    bot.commands.add(Command("brainfuck", ">++++++[<++++++++>-]<.") {
        it.channel.sendMessage(
            EmbedBuilder()
                .setTitle("Brainfuck")
                .setDescription(
                    "Bemenet:\n`${it.contentRaw.split(' ')[1]}`\nKimenet:\n`${
                        Brainfuck.run(it.contentRaw.split(' ')[1])
                    }`"
                )
                .build()
        ).queue { msg -> msg.makeRemovable() }
    })

    bot.commands.add(Command("js", "tudok futtatni JavaScript k√≥dot") {
        val engine: ScriptEngine = ScriptEngineManager().getEngineByName("JavaScript")
        val input = it.contentRaw.removePrefix(".js").replace("```js", "")
            .replace("`", "").replace("let", "var").trim()
        val ans = try {
            engine.eval(input) as Any
        }
        catch (ex: Exception) {
            ex.message
        }
        it.channel.sendMessage(
            EmbedBuilder()
                .setTitle("JavaScript")
                .setDescription("```js\n$input\n```\n`> $ans`")
                .build()
        ).queue { msg -> msg.makeRemovable() }
    })

    bot.commands.add(Command("vibe", "vibe-olunk egy√ºtt voice-ban?") {
        if (it.contentRaw.contains("end")) {
            it.guild.audioManager.closeAudioConnection()
        }
        else {
            val vc = it.member?.voiceState?.channel
            if (vc == null) {
                it.channel.sendMessage("Nem vagy h√≠v√°sban, sz√≥val nem tudom hov√° j√∂jjek.").queue { msg -> msg.makeRemovable() }
            }
            else {
                it.guild.audioManager.openAudioConnection(vc)
                lastVibeCommand = Calendar.getInstance().time.toString()
            }
        }
    })

    bot.commands.add(Command("emoji kv√≠z", "tal√°ld ki, hogy mit jelentenek az emoji-k") {
        val questions = mapOf(
            "K√∂zmond√°s: üëÄüêÆüÜïüö™" to "N√©z, mint borj√∫ az √∫j kapura.", "K√∂zmond√°s: üß†‚öñüí™" to "T√∂bbet √©sszel, mint er≈ëvel.",
            "K√∂zmond√°s: ‚ùåüè°üò∫üéºüê≠üê≠" to "Ha nincs otthon a macska, cincognak az egerek.",
            "K√∂zmond√°s: ‚ùåüëÄüå≥(üå≥üå≤üå≥üå≤)" to "Nem l√°tja a f√°t√≥l az erd≈ët.", "K√∂zmond√°s: ‚åõüîúüåπ" to "T√ºrelem r√≥zs√°t terem",
            "Film: üßíüë¥üöó‚åö" to "Vissza a j√∂v≈ëbe", "Film: üè∞üëßüëß‚ùÑ‚õÑ" to "J√©gvar√°zs", "Film: üë®üë®‚ö´üëΩ" to "Man In Black",
            "Film: üï∑üë¶" to "P√≥kember", "Film: üê¢üêÅüëäüçï" to "Tininindzsa tekn≈ëc√∂k", "Film: üë¶üò°üí™üü¢" to "Hulk",
            "Film: üëß‚ñ∂üêá‚è±üö™ üé©‚òï üëë‚ô•üëß" to "Al√≠z Csodaorsz√°gban", "Film: üëßü¶Åüåπ" to "Sz√©ps√©g √©s a sz√∂rnyeteg",
            "Film: ‚ò†üî¥üõÅ" to "Deadpool", "Film: üóΩü¶Åü¶íü¶ìü¶õüö¢üèù" to "Madagaszk√°r", "Film: üêÅü•Ñüç≤" to "L'ecs√≥",
            "M√°rka: üíªüì±üçé" to "Apple", "M√°rka: üëü‚úî" to "Nike", "M√°rka: ‚≠ïx5üöó" to "Audi"
        )

        fun sendEmojiQuiz() {
            var question = questions.keys.random()
            it.channel.sendMessage("$question\nüîÉ: volt m√°r ‚ùì: megold√°s | K√∂vetkez≈ë: `.emoji kv√≠z`").queue { msg ->
                msg.addReaction("üîÉ").queue()
                msg.addReaction("‚ùì").queue()
                bot.reactionListeners.add { event ->
                    if (event.messageId == msg.id) {
                        when (event.reactionEmote.emoji) {
                            "üîÉ" -> {
                                question = questions.keys.random()
                                msg.editMessage(question).queue()
                            }
                            "‚ùì" -> {
                                msg.editMessage(question + "\nMegold√°s: ||" + questions[question] + "||\n" +
                                        "K√∂vetkez≈ë: `.emoji kv√≠z`").queue()
                                msg.removeReaction("üîÉ", bot.getSelf()).queue()
                                msg.removeReaction("‚ùì", bot.getSelf()).queue()
                            }
                        }
                        msg.removeReaction(event.reactionEmote.emoji, event.user!!).queue()
                    }
                }
            }
        }

        if (it.contentRaw.contains("m√©ret")) {
            it.channel.sendMessage("${questions.size}db emoji kv√≠zem van.").queue()
        }
        else if (it.contentRaw.contains("debug")) {
            it.channel.sendMessage(questions.keys.joinToString("\n")).queue()
        }
        else {
            sendEmojiQuiz()
        }
    }.addTag(Command.TAG_GAME))

    bot.commands.add(Command("repost", "v√≥t m√°'") {
        it.channel.sendFile(File("./repost.jpg")).queue { msg -> msg.makeRemovable() }
    })

    bot.commands.add(Command("hype", "√©breszd fel a szervert reakci√≥ gy≈±jt≈ës j√°t√©kkal") {
        if (it.contentRaw == ".hype") {
            it.channel.sendMessage("A parancs haszn√°lata: `.hype <sz√°m>`").queue { msg -> msg.makeRemovable() }
        }
        else {
            lateinit var listener: (e: MessageReactionAddEvent) -> Unit
            val max = it.contentRaw.removePrefix(".hype ").toInt()
            fun onHypeReact(event: MessageReactionAddEvent, msg: Message) {
                if (event.messageId != msg.id) return
                event.retrieveMessage().queue { rmsg ->
                    val n = rmsg.reactions.map { r -> r.count }.sum() + rmsg.emotes.size
                    var percent = (n / max.toFloat() * 100f).toInt()
                    val percentNoLimit = percent
                    if (percent >= 100) percent = 100
                    if (percent < 100) {
                        rmsg.editMessage("**Hype!** $n/$max Reag√°lj erre az √ºzenetre! üéâ\n`8${"=".repeat(percent * 20 / 100)}${" ".repeat(20 - (percent * 20 / 100))}D` $percentNoLimit%").queue()
                    }
                    else {
                        rmsg.editMessage("**Hype!** $n/$max\n$percentNoLimit% üéâ").queue()
                    }
                }
            }
            it.channel.sendMessage("**Hype!** Reag√°lj erre az √ºzenetre! üéâ\n`[       START!       ]` ${max * 3} m√°sodpercetek van!").queue { msg ->
                listener = bot.addReactionListener { event -> onHypeReact(event, msg) }
            }
            Timer().schedule(timerTask {
                bot.reactionListeners.remove(listener)
                it.channel.sendMessage("Hype v√©ge! üéâ ||Kell egy kis id≈ë a reakci√≥k √∂sszesz√°mol√°s√°hoz, de sz√©p volt!||").queue()
            }, (max * 3 * 1000).toLong())
        }
    }.addTag(Command.TAG_GAME))

    bot.commands.add(Command("fejleszt≈ë", "ha √©rdekel ki alkotott") {
        it.channel.sendMessage("A k√©sz√≠t≈ëm: **@CsakiTheOne#8589** De sokan seg√≠tettek jobb√° v√°lni ‚ù§").queue()
    })
}

fun setBasicTriggers() {
    bot.triggers[".*@random.*"] = {
        it.guild.loadMembers().onSuccess { members ->
            val randomMember = members.filter { m ->
                m.onlineStatus != OnlineStatus.OFFLINE && m.onlineStatus != OnlineStatus.DO_NOT_DISTURB &&
                !m.user.isBot && m.user != it.author
            }.random()
            it.reply(randomMember.asMention).queue()
        }
    }

    bot.triggers["""((szia|hell√≥|hali|cs√°|cs≈ë|hey|henlo) gomb√≥c!*)|sziaszto+k.*|gomb√≥c."""] = {
        val greetings = listOf("Szia!", "Hali!", "Henlo!", "Hey!", "Heyho!")
        it.channel.sendMessage(greetings.random()).queue()
    }

    bot.triggers["""mit csin√°ltok?.*|ki mit csin√°l?.*|mit csin√°lsz gomb√≥c?.*"""] = {
        val activityType = when (bot.getSelf().jda.presence.activity?.type) {
            Activity.ActivityType.LISTENING -> "Zen√©t hallgatok üéß"
            Activity.ActivityType.WATCHING -> "Vide√≥t n√©zek üìΩ"
            else -> "J√°tszok üéÆ"
        }
        it.channel.sendMessage(activityType).queue()
    }

    bot.triggers["k≈ë|pap√≠r|oll√≥|\uD83E\uDEA8|\uD83E\uDDFB|‚úÇÔ∏è"] = {
        val answers = listOf("K≈ë \uD83E\uDEA8", "Pap√≠r \uD83E\uDDFB", "Oll√≥ ‚úÇÔ∏è")
        it.reply(answers.random()).queue { msg -> msg.makeRemovable() }
    }

    bot.triggers[".*szeret.*"] = {
        if (!it.contentRaw.simplify().contains("nem szeret")) {
            it.addReaction("‚ù§Ô∏è").queue()
        }
    }

    bot.triggers["""j√≥ {0,1}√©j.*"""] = {
        val greetings = listOf("Aludj j√≥l!", "√Ålmodj sz√©peket!", "J√≥ √©jt!", "J√≥ √©jszak√°t!", "Pihend ki magad!", "Kitart√°st holnapra!")
        if (!tags.contains("cooldown_goodnight")) {
            it.channel.sendMessage(greetings.random()).queue()
            tags.add("cooldown_goodnight")
            Timer().schedule(timerTask {
                tags.remove("cooldown_goodnight")
            }, 20000)
        }
    }

    bot.triggers[""".*\b(baszdmeg|bazdmeg|fasz|gec|geci|kurva|ribanc|buzi|fuck|rohadj|picsa|pics√°ba|rohad√©k).*"""] = {
        if (!it.channel.name.simplify().contains("nsfw")) {
            it.addReaction("üò†").queue()
            data.diary(bot.getSelf().jda, "${it.author.asTag} cs√∫ny√°n besz√©lt a(z) ${it.channel.name} szob√°ban. Azt, mondta hogy:\n${it.contentRaw}")
        }
    }

    bot.triggers[".*(kapitalizmus|kapitalista).*"] = {
        data.diary(bot.getSelf().jda, "${it.author.asTag} a(z) ${it.channel.name} szob√°ban a ||kapitalizmust|| emlegette.")
    }

    bot.triggers[""".*\b(cs√°ki).*"""] = {
        val guildName = if (it.isFromGuild) "**Szerver:** ${it.guild.name} > ${it.channel.name}" else "**Priv√°t:** ${it.channel.name}"
        val embed = EmbedBuilder()
            .setTitle("Eml√≠t√©s egy √ºzenetben (Nem biztos, hogy PONT r√≥lad van sz√≥, csak azt figyelem hogy benne van-e egy bizonyos sz√∂veg az √ºzenetben)")
            .setDescription("$guildName\n**√úzenet:** ${it.contentRaw}\n**√çrta:** ${it.author.asTag}")
            .build()
        bot.getSelf().jda.getPrivateChannelById(Data.admins[0].privateChannel)?.sendMessage(embed)?.queue()
    }
}

fun setClickerGame() {
    bot.commands.add(Command("clicker", "mint a cookie clicker") {
        it.channel.sendMessage(
            EmbedBuilder()
                .setColor(Color((0..255).random(), (0..255).random(), (0..255).random()))
                .setTitle("Clicker j√°t√©k")
                .setDescription("üåç: ${data.clicks["global"] ?: 0}\nüñ±: 0")
                .build()
        ).queue { clickerMessage ->
            data.clickerMessageIds.add(clickerMessage.id)
            data.save()
            clickerMessage.addReaction("\uD83D\uDDB1").queue()
            clickerMessage.makeRemovable()
        }
    }.addTag(Command.TAG_GAME))

    bot.reactionListeners.add {
        if (!data.clickerMessageIds.contains(it.messageId)) return@add
        if (it.reactionEmote.emoji == "‚ùå") {
            it.retrieveMessage().queue { msg ->
                data.clickerMessageIds.remove(msg.id)
                data.save()
                msg.delete().queue()
            }
            return@add
        }
        it.retrieveMessage().queue { msg ->
            data.clicks["global"] = (data.clicks["global"] ?: 0) + 1
            data.save()
            val clicks = (msg.embeds[0].description!!.split("\n")[1].split(":")[1].trim().toInt()) + 1
            msg.editMessage(
                EmbedBuilder()
                    .setColor(Color((0..255).random(), (0..255).random(), (0..255).random()))
                    .setTitle("Clicker j√°t√©k")
                    .setDescription("üåç: ${data.clicks["global"] ?: 0}\nüñ±: $clicks")
                    .build()
            ).queue { _ ->
                it.reaction.removeReaction(it.user!!).queue()
            }
        }
    }
}

fun setHangmanGame() {
    bot.commands.add(Command("akaszt√≥fa", "G--b√≥c") {
        if (it.contentRaw == ".akaszt√≥fa") {
            it.channel.sendMessage("Parancs haszn√°lat: `.akaszt√≥fa ||<sz√∂veg>||` P√©ld√°ul: `.akaszt√≥fa ||gomb√≥c||`").queue { msg -> msg.makeRemovable() }
        }
        else {
            val param = it.contentRaw.removePrefix(".akaszt√≥fa ").replace("||", "")
            it.channel.sendMessage("**Akaszt√≥fa (${it.author.asTag})** Tipphez: `a.<bet≈±>` P√©ld√°ul: `a.k`\n```\n${Hangman.toHangedText(param, "")}\n```").queue { msg ->
                val newGame = Hangman(it.author.asTag, it.guild.id, it.channel.id, msg.id, param, "")
                hangmanGames.add(newGame)
                if (!newGame.toHangedText().contains("-")) {
                    msg.makeRemovable()
                    hangmanGames.remove(newGame)
                }
            }
        }
    }.addTag(Command.TAG_GAME))

    bot.triggers["""a\.[a-z]"""] = {
        val c = it.contentRaw.toLowerCase()[2]
        val hangGame = hangmanGames.first { h -> h.guildId == it.guild.id && h.channelId == it.channel.id }
        hangGame.players.add(it.author.asMention)
        hangGame.chars += c
        hangGame.sendMessage(bot.getSelf().jda, data)
        if (hangGame.getIsGameEnded() != 0) {
            hangmanGames.remove(hangGame)
        }
        it.delete().queue()
    }
}

fun setNumGuesserGame() {
    bot.commands.add(Command("sz√°mkital√°l√≥", "gondolok egy sz√°mra") {
        if (it.contentRaw == ".sz√°mkital√°l√≥") {
            it.channel.sendMessage(
                EmbedBuilder()
                    .setTitle("Sz√°mkital√°l√≥ j√°t√©km√≥dok:")
                    .setDescription(
                        "Alap: `.sz√°mkital√°l√≥ <max sz√°m>` pl: `.sz√°mkital√°l√≥ 100`\n" +
                        "Bet≈±: `.sz√°mkital√°l√≥ abc`\n" +
                        "Hanna: `.sz√°mkital√°l√≥ hanna` (el√©g nagy kih√≠v√°s)"
                    )
                    .build()
            ).queue { msg -> msg.makeRemovable() }
        }
        else {
            val param = it.contentRaw.split(" ")[1]
            var introText = ""
            when (param) {
                "abc" -> {
                    introText = "Gondoltam egy bet≈±re az (angol) ABC-b≈ël. Tippel√©shez √≠rj egy bet≈±t!"
                    it.channel.sendMessage(introText).queue { msg ->
                        numGuesserGames.add(NumGuesser(it.author.asTag, it.guild.id, it.channel.id, msg.id, (('a'.toInt())..('z'.toInt())).random(), mutableListOf("char")))
                    }
                }
                "hanna" -> {
                    introText = "Gondoltam egy sz√°mra **${Int.MIN_VALUE} √©s ${Int.MAX_VALUE}** k√∂z√∂tt. Tipphez √≠rd le sim√°n a sz√°mot chat-re!"
                    it.channel.sendMessage(introText).queue { msg ->
                        numGuesserGames.add(NumGuesser(it.author.asTag, it.guild.id, it.channel.id, msg.id, (Int.MIN_VALUE..Int.MAX_VALUE).random(), mutableListOf("hanna")))
                    }
                }
                else -> {
                    val max = (0..(param.toInt())).random()
                    introText = "Gondoltam egy sz√°mra **0 √©s $max** k√∂z√∂tt. Tipphez √≠rd le sim√°n a sz√°mot chat-re!"
                    it.channel.sendMessage(introText).queue { msg ->
                        numGuesserGames.add(NumGuesser(it.author.asTag, it.guild.id, it.channel.id, msg.id, (0..max).random(), mutableListOf()))
                    }
                }
            }
        }
    }.addTag(Command.TAG_GAME))

    bot.triggers["[a-z]"] = {
        val c = it.contentRaw.toLowerCase()[0]
        val x = c.toInt()
        val numGuesser = numGuesserGames.first { ng -> ng.guildId == it.guild.id && ng.channelId == it.channel.id && ng.tags.contains("char") }
        when {
            x > numGuesser.num -> {
                it.channel.retrieveMessageById(numGuesser.messageId).queue { msg ->
                    it.channel.editMessageById(numGuesser.messageId, "${msg.contentRaw}\n`${it.author.name}: ? < $c`").queue()
                }
            }
            x < numGuesser.num -> {
                it.channel.retrieveMessageById(numGuesser.messageId).queue { msg ->
                    it.channel.editMessageById(numGuesser.messageId, "${msg.contentRaw}\n`${it.author.name}: ? > $c`").queue()
                }
            }
            x == numGuesser.num -> {
                it.channel.retrieveMessageById(numGuesser.messageId).queue { msg ->
                    it.channel.editMessageById(numGuesser.messageId, "${msg.contentRaw}\n${it.author.name} eltal√°lta, hogy a bet≈± $c! üéâ\n√öj j√°t√©k: `.sz√°mkital√°l√≥`").queue {
                        msg.makeRemovable()
                        numGuesserGames.remove(numGuesser)
                    }
                }
            }
        }
        it.delete().queue()
    }

    bot.triggers["-{0,1}[0-9]+"] = {
        val x = it.contentRaw.toInt()
        val numGuesser = numGuesserGames.first { ng -> ng.guildId == it.guild.id && ng.channelId == it.channel.id }
        when {
            x > numGuesser.num -> {
                it.channel.retrieveMessageById(numGuesser.messageId).queue { msg ->
                    var newContent = "${msg.contentRaw}\n`${it.author.name}: X < $x`"
                    if (newContent.length > 1000) newContent += " (kevesebb, mint ${2000 - newContent.length} karakter maradt)"
                    it.channel.editMessageById(numGuesser.messageId, newContent).queue()
                }
            }
            x < numGuesser.num -> {
                it.channel.retrieveMessageById(numGuesser.messageId).queue { msg ->
                    var newContent = "${msg.contentRaw}\n`${it.author.name}: X > $x`"
                    if (newContent.length > 1000) newContent += " (kevesebb, mint ${2000 - newContent.length} karakter maradt)"
                    it.channel.editMessageById(numGuesser.messageId, newContent).queue()
                }
            }
            x == numGuesser.num -> {
                it.channel.retrieveMessageById(numGuesser.messageId).queue { msg ->
                    if (it.author.name == "pussyhunter") {
                        it.channel.editMessageById(numGuesser.messageId, "${msg.contentRaw}\n${it.author.name}: X `üòù` $x`").queue()
                    }
                    else {
                        it.channel.editMessageById(numGuesser.messageId, "${msg.contentRaw}\n${it.author.name} eltal√°lta, hogy a sz√°m $x! üéâ\n√öj j√°t√©k: `.sz√°mkital√°l√≥`").queue { edited ->
                            msg.makeRemovable()
                            if (numGuesser.tags.contains("hanna")) {
                                data.diary(bot.getSelf().jda, "${it.author.asTag} kital√°lta a sz√°mot a legnehezebb szinten.")
                            }
                            numGuesserGames.remove(numGuesser)
                        }
                    }
                }
            }
        }
        it.delete().queue()
    }
}