import Bot.Companion.create
import Bot.Companion.makeRemovable
import Bot.Companion.simplify
import Global.Companion.bot
import Global.Companion.data
import Global.Companion.jda
import com.sedmelluq.discord.lavaplayer.player.*
import extra.*
import net.dv8tion.jda.api.EmbedBuilder
import net.dv8tion.jda.api.OnlineStatus
import net.dv8tion.jda.api.entities.Activity
import net.dv8tion.jda.api.entities.Message
import net.dv8tion.jda.api.events.message.react.MessageReactionAddEvent
import java.awt.Color
import java.util.*
import javax.script.ScriptEngine
import javax.script.ScriptEngineManager
import kotlin.concurrent.timerTask

lateinit var simpleCommandManager: SimpleCommandManager
var autoActivity = true
var tags = mutableSetOf<String>()

fun reload() {
    data = Data.load()
    Data.logClear()
    simpleCommandManager = SimpleCommandManager.load()

    bot.commands.clear()
    setHelp()
    setAdminCommands()
    setBasicCommands()
    setBasicTriggers()
    setClickerGame()
    setHangmanGame()
    setNumGuesserGame()
    bot.commands.addAll(simpleCommandManager.commands.map { sc -> sc.toCommand() })

    for (cmd in bot.commands) cmd.createTags()
}

fun main() {
    bot = Bot(Secret.getToken("start"))
    reload()
    Data.log("Main", "----- BOT STARTED -----")

    Timer().scheduleAtFixedRate(timerTask {
        if (!autoActivity) return@timerTask
        val activities = listOf(
            Activity.playing("${jda.guilds.size} szerveren"),
            Activity.playing("Minecraft"),
            Activity.playing("Terraria (k√∂sz√∂n√∂m @Krey)"),
            Activity.listening(".help"),
            Activity.listening("Emerald Hill Zone"),
            Activity.listening("Lifelight - AmaLee"),
            Activity.listening("Thunderstruck - AC/DC"),
            Activity.listening("TheFatRat"),
            Activity.listening("Lindsey Stirling"),
            Activity.watching("TikTok: @csakivevo"),
            Activity.watching("Technoblade trolling Skeppy"),
            Activity.watching("Minecraft stream online √≥r√°n"),
            Activity.watching("Final Space"),
            Activity.watching("üüß‚¨õ"),
        )
        jda.presence.activity = activities.random()
        Data.log("Activity manager", jda.presence.activity.toString())

        Pinger.pingMinecraftServer()
    }, 3000L, (1000 * 60 * 5).toLong())
}

fun setHelp() {
    Command("help admin", "") {
        val helpMessage = "**Parancsok (prefix: `${Data.prefix}` vagy sz√≥l√≠tsd meg Gomb√≥cot):**\n" +
                bot.commands.filter { c -> c.isAdminOnly }.map { c -> c.toString() }.sorted().joinToString("\n")
        it.channel.sendMessage(
            EmbedBuilder()
                .create("Gomb√≥c seg√≠ts√©g", helpMessage)
                .build()
        ).queue { msg -> msg.makeRemovable() }
    }.setIsAdminOnly(true)

    Command("help j√°t√©k", "n√©zd meg milyen j√°t√©kokat j√°tszhatsz") {
        val helpMessage = "**J√°t√©kok (prefix: `${Data.prefix}` vagy sz√≥l√≠tsd meg Gomb√≥cot):**\n" +
                bot.commands.filter { c -> c.tags.contains(Command.TAG_GAME) }.map { c -> c.toString() }.sorted()
                    .joinToString("\n")
        it.channel.sendMessage(
            EmbedBuilder().create("Gomb√≥c j√°t√©kok", helpMessage)
                .build()
        ).queue { msg -> msg.makeRemovable() }
    }

    Command("help trigger", "Gomb√≥c mag√°t√≥l reag√°l dolgokra") {
        val helpMessage = "**Dolgok, amikre Gomb√≥c √∂n√°ll√≥an reag√°l:**\n" +
                bot.commands.filter { c -> c.isTrigger }.map { c -> c.toString() }.sorted().joinToString("\n")
        it.channel.sendMessage(
            EmbedBuilder().create("Gomb√≥c trigger-ek", helpMessage)
                .setFooter("Regex: <https://regexr.com/>")
                .build()
        ).queue { msg -> msg.makeRemovable() }
    }

    Command("help", "√Å√Å√Å√Å√Å√Å√Å√Å√Å!!!") {
        val helpMessage = "**Parancsok (mindegyik el√© `${Data.prefix}` vagy sz√≥l√≠tsd meg Gomb√≥cot):**\n" +
                bot.commands.filter { c -> c.tags.contains(Command.TAG_BASIC) }.map { c -> c.toString() }.sorted()
                    .joinToString("\n")
        it.channel.sendMessage(
            EmbedBuilder().create("Gomb√≥c seg√≠ts√©g", helpMessage)
                .build()
        ).queue { msg -> msg.makeRemovable() }
    }
}

fun setAdminCommands() {
    Command("reload", "adatok bet√∂lt√©se √∫jra") {
        reload()
        it.channel.sendMessage("Adatok √©s ${bot.commands.size} (${simpleCommandManager.commands.size} JSON) parancs bet√∂ltve. ‚úÖ")
            .queue { msg -> msg.makeRemovable() }
    }.setIsAdminOnly(true)

    Command("status offline", "offline-ra √°ll√≠tja a botot") {
        jda.presence.setStatus(OnlineStatus.OFFLINE)
        println("Status set to ${jda.presence.status.name}")
    }.setIsAdminOnly(true)

    Command("activity", "bot √°llapot √°ll√≠t√°s") {
        if (it.contentRaw.contains("auto")) autoActivity = true
        else {
            autoActivity = false
            val activityType = it.contentRaw.removePrefix(".activity ").split(' ')[0]
            jda.presence.activity = when (activityType) {
                "play" -> Activity.playing(it.contentRaw.substring(15))
                "watch" -> Activity.watching(it.contentRaw.substring(16))
                "stream" -> Activity.streaming(it.contentRaw.substring(17), it.contentRaw.substringAfter("URL="))
                "listen" -> Activity.listening(it.contentRaw.substring(17))
                else -> Activity.playing(it.contentRaw.substring(10))
            }
        }
    }.setIsAdminOnly(true)

    Command("log read", "r√©szletes napl√≥ olvas√°sa") {
        it.channel.sendMessage("```\n" + Data.logRead() + "\n```").queue { msg -> msg.makeRemovable() }
    }.setIsAdminOnly(true)

    Command("clear", "utols√≥ √ºzenetek t√∂rl√©se") {
        val count = it.contentRaw.removePrefix(".clear ").toInt() + 1
        jda.presence.setStatus(OnlineStatus.DO_NOT_DISTURB)
        it.channel.history.retrievePast(count).queue { msgs ->
            for (i in 0 until msgs.size) {
                msgs[i].delete().queue {
                    println("[CLEAR]: Deleted message ${i}/${msgs.size - 1}")
                    if (i >= msgs.size - 1) {
                        jda.presence.setStatus(OnlineStatus.ONLINE)
                    }
                }
            }
        }
    }.setIsAdminOnly(true)
}

fun setBasicCommands() {
    Command("ping", "üèì") {
        it.channel.sendMessage(":ping_pong:").queue { msg -> msg.makeRemovable() }
        Pinger.pingMinecraftServer()
    }

    Command("tagok", "h√°ny ember van ezen a szerveren?") {
        it.guild.loadMembers().onSuccess { members ->
            val csakiStatus =
                members.firstOrNull { m -> m.id == Data.admins[0].id }?.onlineStatus ?: OnlineStatus.UNKNOWN
            it.channel.sendMessage(
                EmbedBuilder()
                    .setTitle("Szerver tagok (${members.size})")
                    .setDescription(
                        "üü¢ online: ${members.filter { m -> m.onlineStatus == OnlineStatus.ONLINE }.size} " +
                                "ü§ñ: ${members.filter { m -> m.user.isBot }.size}\n" +
                                "üü° t√©tlen: ${members.filter { m -> m.onlineStatus == OnlineStatus.IDLE }.size}\n" +
                                "üî¥ elfoglalt: ${members.filter { m -> m.onlineStatus == OnlineStatus.DO_NOT_DISTURB }.size}\n" +
                                "üì° offline: ${members.filter { m -> m.onlineStatus == OnlineStatus.OFFLINE }.size}\n" +
                                "Szerver tulaj (${it.guild.owner?.user?.name}): ${it.guild.owner?.onlineStatus}\n" +
                                "Gomb√≥c tulaj (${Data.admins[0].name}): $csakiStatus"
                    )
                    .build()
            ).queue { msg -> msg.makeRemovable() }
        }
    }

    Command("mondd", "ki tudsz mondatni velem valamit") {
        it.channel.sendMessage(
            if (Data.admins.any { admin -> admin.id == it.author.id }) it.contentRaw.removePrefix(".mondd ")
            else "*${it.contentRaw.removePrefix(".mondd ")}*"
        ).queue()
    }

    Command("sz√°ml√°l√≥", "sz√°molok dolgokat") {
        when (it.contentRaw) {
            ".sz√°ml√°l√≥" -> {
                it.channel.sendMessage(
                    EmbedBuilder()
                        .setTitle("Sz√°mol√≥")
                        .setDescription("`.sz√°mol√≥ lista` `.sz√°mol√≥ <valami> 1` `.sz√°mol√≥ <valami> -1` `.sz√°mol√≥ <valami> reset`")
                        .build()
                ).queue { msg -> msg.makeRemovable() }
            }
            ".sz√°ml√°l√≥ lista" -> {
                it.channel.sendMessage(
                    EmbedBuilder()
                        .setTitle("Sz√°mol√≥")
                        .setDescription(data.counters.keys.joinToString { k -> "$k: ${data.counters[k]}" })
                        .build()
                ).queue { msg -> msg.makeRemovable() }
            }
            else -> {
                val params = it.contentRaw.split(' ')
                val counter = params[1]
                val modifier = if (params.size > 2) params[2] else ""
                if (modifier == "reset") data.counters.remove(counter)
                else if ("-?[0-9]+".toRegex().matches(modifier)) data.counters[counter] =
                    (data.counters[counter] ?: 0) + modifier.toInt()

                if (data.counters[counter] == 0) data.counters.remove(counter)

                it.channel.sendMessage("$counter: ${data.counters[counter] ?: 0}").queue { msg ->
                    msg.addReaction("üëÜ").queue()
                    msg.addReaction("üëá").queue()
                    msg.makeRemovable()
                }
            }
        }
        data.save()
    }

    bot.reactionListeners.add { event: MessageReactionAddEvent, msg: Message ->
        val key = msg.contentRaw.split(':')[0]
        if (data.counters.any { c -> c.key == key }) {
            when (event.reactionEmote.emoji) {
                "üëÜ" -> {
                    data.counters[key] = (data.counters[key] ?: 0) + 1
                    msg.removeReaction("üëÜ", event.user!!).queue()
                }
                "üëá" -> {
                    data.counters[key] = (data.counters[key] ?: 0) - 1
                    msg.removeReaction("üëá", event.user!!).queue()
                }
            }
            msg.editMessage("$key: ${data.counters[key] ?: 0}").queue()
        }
    }

    Command("szavaz√°s", "√©n egy demokratikusan megv√°lasztott bot vagyok") {
        if (it.contentRaw == ".szavaz√°s") {
            it.channel.sendMessage(
                "Szavaz√°s haszn√°lata: `.szavaz√°s <k√©rd√©s>; <emoji> <v√°lasz>; <emoji2> <v√°lasz2>`\n" +
                        "P√©ld√°ul: `.szavaz√°s Hogy vagy?; üëç J√≥l!; üëé Nem a legjobb.`"
            ).queue { msg -> msg.makeRemovable() }
        } else {
            val params = it.contentRaw.removePrefix(".szavaz√°s ").split(';').map { r -> r.trim() }
            val options = params.subList(1, params.size - 1).joinToString("\n")
            it.channel.sendMessage(
                EmbedBuilder()
                    .setTitle(params[0])
                    .setDescription(options)
                    .build()
            ).queue { poll ->
                for (i in 1 until params.size) {
                    poll.addReaction(params[i].split(' ')[0]).queue()
                }
            }
        }
    }

    Command("szegz", "nagyon romi") {
        val userFrom = it.author.asMention
        val userTo = it.contentRaw.split(' ')[1]
        it.channel.sendMessage("$userFrom megszegzeli ≈ët: $userTo").queue { msg ->
            msg.addReaction(listOf("‚ù§Ô∏è", "\uD83D\uDE0F", "\uD83D\uDE1C", "\uD83D\uDE2E").random()).queue()
        }
    }.setIsNSFW(true)

    Command("mes√©k", "p√°r j√≥ mese, amit √©rdemes n√©zni") {
        it.channel.sendMessage(
            EmbedBuilder()
                .setTitle("Mes√©k")
                .setDescription("P√°r j√≥ mese, amit √©rdemes n√©zni.")
                .addField("Alpha Betas", "On YouTube from VanossGaming", true)
                .addField("Disenchantment", "Netflix", true)
                .addField("Final Space", "Netflix", true)
                .addField("Helluva Boss", "On YouTube from Vivziepop", true)
                .addField("Samurai Jack", "", true)
                .addField("Sonic Boom", "On YouTube", true)
                .build()
        ).queue { msg -> msg.makeRemovable() }
    }

    Command("matek", "√≠rj be egy m≈±veletet √©s kisz√°molom neked") {
        if (it.contentRaw == ".matek") {
            it.channel.sendMessage("√çgy haszn√°ld a parancsot: `.matek <m≈±velet>`\nP√©ld√°ul: `.matek 2 + 2`")
                .queue { msg -> msg.makeRemovable() }
        } else {
            val jsMathMap = hashMapOf(
                "sin" to "Math.sin", "cos" to "Math.cos", "tan" to "Math.tan", "pi" to "Math.PI", "sqrt" to "Math.sqrt",
                "random" to "Math.random()", "rdm" to "Math.random()", "pow" to "Math.pow", "abs" to "Math.abs"
            )
            val engine: ScriptEngine = ScriptEngineManager().getEngineByName("JavaScript")
            var input = it.contentRaw.removePrefix(".matek ")
            for (pair in jsMathMap) input = input.replace(pair.key, pair.value)
            val ans = engine.eval(input) as Number
            it.channel.sendMessage("$input = $ans").queue { msg -> msg.makeRemovable() }
        }
    }

    Command("brainfuck", ">++++++[<++++++++>-]<.") {
        it.channel.sendMessage(
            EmbedBuilder()
                .setTitle("Brainfuck")
                .setDescription(
                    "Bemenet:\n`${it.contentRaw.split(' ')[1]}`\nKimenet:\n`${
                        Brainfuck.run(it.contentRaw.split(' ')[1])
                    }`"
                )
                .build()
        ).queue { msg -> msg.makeRemovable() }
    }

    Command("js", "tudok futtatni JavaScript k√≥dot") {
        val engine: ScriptEngine = ScriptEngineManager().getEngineByName("JavaScript")
        val input = it.contentRaw.removePrefix(".js").replace("```js", "")
            .replace("`", "").replace("let", "var").trim()
        val ans = try {
            engine.eval(input) as Any
        } catch (ex: Exception) {
            ex.message
        }
        it.channel.sendMessage(
            EmbedBuilder()
                .setTitle("JavaScript")
                .setDescription("```js\n$input\n```\n`> $ans`")
                .build()
        ).queue { msg -> msg.makeRemovable() }
    }

    Command("vibe", "vibe-olunk egy√ºtt voice-ban?") {
        val vc = it.member?.voiceState?.channel
        if (it.contentRaw.contains("end")) {
            it.guild.audioManager.closeAudioConnection()
        } else if (it.contentRaw == ".vibe help") {
            it.channel.sendMessage("Vibe-oljunk!\n`.vibe (bababooey|bruh|in the 20s|otter|<YouTube link>)`")
                .queue { msg -> msg.makeRemovable() }
        } else {
            if (vc == null) {
                it.channel.sendMessage("Nem vagy h√≠v√°sban, sz√≥val nem tudom hov√° j√∂jjek.")
                    .queue { msg -> msg.makeRemovable() }
            } else {
                when (val param = it.contentRaw.removePrefix(".vibe").trim()) {
                    "bababooey" -> AudioModule.playSound(vc, AudioModule.SOUND_BABABOOEY)
                    "bruh" -> AudioModule.playSound(vc, AudioModule.SOUND_BRUH)
                    "in the 20s" -> AudioModule.playSound(vc, AudioModule.SOUND_VIBING20S)
                    "otter" -> AudioModule.playSound(vc, AudioModule.SOUND_OTTER)
                    else -> if (param.isNotEmpty()) AudioModule.playSound(vc, param) else AudioModule.joinVoice(vc)
                }
            }
        }
    }

    Command("emoji kv√≠z", "tal√°ld ki, hogy mit jelentenek az emoji-k") {
        val questions = mapOf(
            "K√∂zmond√°s: üëÄüêÆüÜïüö™" to "N√©z, mint borj√∫ az √∫j kapura.",
            "K√∂zmond√°s: üß†‚öñüí™" to "T√∂bbet √©sszel, mint er≈ëvel.",
            "K√∂zmond√°s: ‚ùåüè°üò∫üéºüê≠üê≠" to "Ha nincs otthon a macska, cincognak az egerek.",
            "K√∂zmond√°s: ‚ùåüëÄüå≥(üå≥üå≤üå≥üå≤)" to "Nem l√°tja a f√°t√≥l az erd≈ët.",
            "K√∂zmond√°s: ‚åõüîúüåπ" to "T√ºrelem r√≥zs√°t terem",
            "Film: üßíüë¥üöó‚åö" to "Vissza a j√∂v≈ëbe",
            "Film: üè∞üëßüëß‚ùÑ‚õÑ" to "J√©gvar√°zs",
            "Film: üë®üë®‚ö´üëΩ" to "Man In Black",
            "Film: üï∑üë¶" to "P√≥kember",
            "Film: üê¢üêÅüëäüçï" to "Tininindzsa tekn≈ëc√∂k",
            "Film: üë¶üò°üí™üü¢" to "Hulk",
            "Film: üëß‚ñ∂üêá‚è±üö™ üé©‚òï üëë‚ô•üëß" to "Al√≠z Csodaorsz√°gban",
            "Film: üëßü¶Åüåπ" to "Sz√©ps√©g √©s a sz√∂rnyeteg",
            "Film: ‚ò†üî¥üõÅ" to "Deadpool",
            "Film: üóΩü¶Åü¶íü¶ìü¶õüö¢üèù" to "Madagaszk√°r",
            "Film: üêÅü•Ñüç≤" to "L'ecs√≥",
            "M√°rka: üíªüì±üçé" to "Apple",
            "M√°rka: üëü‚úî" to "Nike",
            "M√°rka: ‚≠ïx5üöó" to "Audi"
        )

        fun sendEmojiQuiz() {
            var question = questions.keys.random()
            it.channel.sendMessage("$question\nüîÉ: volt m√°r ‚ùì: megold√°s | K√∂vetkez≈ë: `.emoji kv√≠z`").queue { msg ->
                msg.addReaction("üîÉ").queue()
                msg.addReaction("‚ùì").queue()
                bot.reactionListeners.add { event: MessageReactionAddEvent, _: Message ->
                    if (event.messageId == msg.id) {
                        when (event.reactionEmote.emoji) {
                            "üîÉ" -> {
                                question = questions.keys.random()
                                msg.editMessage(question).queue()
                            }
                            "‚ùì" -> {
                                msg.editMessage(
                                    question + "\nMegold√°s: ||" + questions[question] + "||\n" +
                                            "K√∂vetkez≈ë: `.emoji kv√≠z`"
                                ).queue()
                                msg.removeReaction("üîÉ", bot.self).queue()
                                msg.removeReaction("‚ùì", bot.self).queue()
                            }
                        }
                        msg.removeReaction(event.reactionEmote.emoji, event.user!!).queue()
                    }
                }
            }
        }

        when {
            it.contentRaw.contains("m√©ret") -> {
                it.channel.sendMessage("${questions.size}db emoji kv√≠zem van.").queue()
            }
            it.contentRaw.contains("debug") -> {
                it.channel.sendMessage(questions.keys.joinToString("\n")).queue()
            }
            else -> sendEmojiQuiz()
        }
    }.addTag(Command.TAG_GAME)

    Command("hype", "√©breszd fel a szervert reakci√≥ gy≈±jt≈ës j√°t√©kkal") {
        if (it.contentRaw == ".hype") {
            it.channel.sendMessage("A parancs haszn√°lata: `.hype <sz√°m>`").queue { msg -> msg.makeRemovable() }
        } else {
            lateinit var listener: (e: MessageReactionAddEvent, m: Message) -> Unit
            val max = it.contentRaw.removePrefix(".hype ").toInt()
            fun onHypeReact(event: MessageReactionAddEvent, msg: Message) {
                if (event.messageId != msg.id) return
                event.retrieveMessage().queue { rmsg ->
                    val n = rmsg.reactions.map { r -> r.count }.sum() + rmsg.emotes.size
                    var percent = (n / max.toFloat() * 100f).toInt()
                    val percentNoLimit = percent
                    if (percent >= 100) percent = 100
                    if (percent < 100) {
                        rmsg.editMessage(
                            "**Hype!** $n/$max Reag√°lj erre az √ºzenetre! üéâ\n`8${"=".repeat(percent * 20 / 100)}${
                                " ".repeat(
                                    20 - (percent * 20 / 100)
                                )
                            }D` $percentNoLimit%"
                        ).queue()
                    } else {
                        rmsg.editMessage("**Hype!** $n/$max\n$percentNoLimit% üéâ").queue()
                    }
                }
            }
            it.channel.sendMessage("**Hype!** Reag√°lj erre az √ºzenetre! üéâ\n`[       START!       ]` ${max * 3} m√°sodpercetek van!")
                .queue {
                    listener = bot.addReactionListener { event: MessageReactionAddEvent, msg: Message ->
                        onHypeReact(
                            event,
                            msg
                        )
                    }
                }
            Timer().schedule(timerTask {
                bot.reactionListeners.remove(listener)
                it.channel.sendMessage("Hype v√©ge! üéâ ||Kell egy kis id≈ë a reakci√≥k √∂sszesz√°mol√°s√°hoz, de sz√©p volt!||")
                    .queue()
            }, (max * 3 * 1000).toLong())
        }
    }.addTag(Command.TAG_GAME)
}

fun setBasicTriggers() {
    Command(""".*@random\b.*""", "@random") {
        it.guild.loadMembers().onSuccess { members ->
            val randomMember = members.filter { m ->
                m.onlineStatus != OnlineStatus.OFFLINE && m.onlineStatus != OnlineStatus.DO_NOT_DISTURB &&
                        !m.user.isBot && m.user != it.author
            }.random()
            it.reply(randomMember.asMention).queue()
        }
    }.setIsTrigger(true)

    Command(
        """((szia|hell√≥|hali|cs√°|cs≈ë|hey|henlo) gomb√≥c!*)|sziaszto+k.*|gomb√≥c""",
        "k√∂sz√∂n√©s mindenkinek vagy Gomb√≥cnak"
    ) {
        val greetings = listOf("Szia!", "Hali!", "Henlo!", "Hey!", "Heyho!")
        it.channel.sendMessage(greetings.random()).queue()
    }.setIsTrigger(true)

    Command(
        """mit csin√°ltok?.*|ki mit csin√°l?.*|mit csin√°lsz gomb√≥c?.*""",
        "mit csin√°ltok? / mit csin√°lsz Gomb√≥c?"
    ) {
        val activityType = when (jda.presence.activity?.type) {
            Activity.ActivityType.LISTENING -> "Zen√©t hallgatok üéß"
            Activity.ActivityType.WATCHING -> "Vide√≥t n√©zek üìΩ"
            else -> "J√°tszok üéÆ"
        }
        it.channel.sendMessage(activityType).queue()
    }.setIsTrigger(true)

    Command("k≈ë|pap√≠r|oll√≥", "k≈ë pap√≠r oll√≥") {
        val answers = listOf("K≈ë \uD83E\uDEA8", "Pap√≠r \uD83E\uDDFB", "Oll√≥ ‚úÇÔ∏è")
        it.reply(answers.random()).queue { msg -> msg.makeRemovable() }
    }.setIsTrigger(true).addTag(Command.TAG_GAME)

    Command(".*szeret.*", "szeretet") {
        if (!it.contentRaw.simplify().contains("nem szeret")) {
            it.addReaction("‚ù§Ô∏è").queue()
        }
    }.setIsTrigger(true)

    Command("""j√≥ {0,1}√©j.*""", "j√≥ √©jt √ºzenetek") {
        val greetings = listOf(
            "Aludj j√≥l!",
            "√Ålmodj sz√©peket!",
            "J√≥ √©jt!",
            "J√≥ √©jszak√°t!",
            "Pihend ki magad!",
            "Kitart√°st holnapra!"
        )
        if (!tags.contains("cooldown_goodnight")) {
            it.channel.sendMessage(greetings.random()).queue()
            tags.add("cooldown_goodnight")
            Timer().schedule(timerTask {
                tags.remove("cooldown_goodnight")
            }, 20000)
        }
    }.setIsTrigger(true)

    Command(
        """.*\b(baszdmeg|bazdmeg|fasz|gec|geci|kurva|ribanc|buzi|fuck|rohadj|picsa|pics√°ba|rohad√©k|cig√°ny).*""",
        "k√°romkod√°s"
    ) {
        if (!it.channel.name.simplify().contains("nsfw")) {
            it.addReaction("üò†").queue()
            data.diary(
                "${it.author.asTag} cs√∫ny√°n besz√©lt a(z) ${it.channel.name} szob√°ban.\n||${
                    it.contentRaw.replace(
                        "||",
                        "|"
                    )
                }||"
            )
        }
    }.setIsTrigger(true)

    Command(".*(kapitalizmus|kapitalista).*", "kapitalizmus emleget√©se") {
        data.diary("${it.author.asTag} a(z) ${it.channel.name} szob√°ban a ||kapitalizmust|| emlegette.")
    }.setIsTrigger(true)

    Command(""".*\b(cs√°ki).*""", "valaki Cs√°kir√≥l besz√©l") {
        val guildName =
            if (it.isFromGuild) "**Szerver:** ${it.guild.name} > ${it.channel.name}" else "**Priv√°t:** ${it.channel.name}"
        val embed = EmbedBuilder()
            .setTitle("Eml√≠t√©s egy √ºzenetben (Nem biztos, hogy PONT r√≥lad van sz√≥, csak azt figyelem hogy benne van-e egy bizonyos sz√∂veg az √ºzenetben)")
            .setDescription("$guildName\n**√úzenet:** ${it.contentRaw}\n**√çrta:** ${it.author.asTag}")
            .build()
        jda.getPrivateChannelById(Data.admins[0].privateChannel)?.sendMessage(embed)
            ?.queue { msg -> msg.makeRemovable() }
    }.setIsTrigger(true)
}

fun setClickerGame() {
    Command("clicker", "mint a cookie clicker") {
        it.channel.sendMessage(
            EmbedBuilder()
                .setColor(Color((0..255).random(), (0..255).random(), (0..255).random()))
                .setTitle("Clicker j√°t√©k")
                .setDescription("üåç: ${data.clicks["global"] ?: 0}\nüñ±: 0")
                .build()
        ).queue { clickerMessage ->
            data.clickerMessageIds.add(clickerMessage.id)
            data.save()
            clickerMessage.addReaction("\uD83D\uDDB1").queue()
            clickerMessage.makeRemovable()
        }
    }.addTag(Command.TAG_GAME)

    bot.reactionListeners.add { event: MessageReactionAddEvent, msg: Message ->
        if (!data.clickerMessageIds.contains(msg.id)) return@add
        if (event.reactionEmote.emoji == "‚ùå") {
            data.clickerMessageIds.remove(msg.id)
            data.save()
            msg.delete().queue()
            return@add
        }
        data.clicks["global"] = (data.clicks["global"] ?: 0) + 1
        data.save()
        val clicks = (msg.embeds[0].description!!.split("\n")[1].split(":")[1].trim().toInt()) + 1
        msg.editMessage(
            EmbedBuilder()
                .setColor(Color((0..255).random(), (0..255).random(), (0..255).random()))
                .setTitle("Clicker j√°t√©k")
                .setDescription("üåç: ${data.clicks["global"] ?: 0}\nüñ±: $clicks")
                .build()
        ).queue {
            event.reaction.removeReaction(event.user!!).queue()
        }
    }
}

fun setHangmanGame() {
    Command("akaszt√≥fa", "G--b√≥c") {
        if (it.contentRaw == ".akaszt√≥fa") {
            it.channel.sendMessage(
                EmbedBuilder().setTitle("Akaszt√≥fa")
                    .setDescription(
                        "Statisztik√°k: `.akaszt√≥fa stat`\n" +
                                "√öj j√°t√©k: `.akaszt√≥fa ||<sz√∂veg>||` Pl: `.akaszt√≥fa ||gomb√≥c||` vagy " +
                                "`.akaszt√≥fa ||j√°t√©k||{‚ùì}`\n" +
                                "Ezt a vonalat `|` √≠gy kell √≠rni: `AltGr + W`\n" +
                                "J√°t√©k m√≥dos√≠t√≥k: ‚ùìseg√≠ts√©gek"
                    )
                    .build()
            ).queue { msg -> msg.makeRemovable() }
        } else if (it.contentRaw == ".akaszt√≥fa clear") {
            val isPlaying = data.hangmanGames.any { h -> h.guildId == it.guild.id && h.channelId == it.channel.id }
            if (isPlaying) {
                data.hangmanGames.removeIf { h -> h.guildId == it.guild.id && h.channelId == it.channel.id }
                it.channel.sendMessage("Akaszt√≥fa j√°t√©k t√∂r√∂lve :x:").queue { msg -> msg.makeRemovable() }
            } else it.channel.sendMessage("Itt nem volt akaszt√≥fa j√°t√©k.").queue { msg -> msg.makeRemovable() }
        } else if (it.contentRaw.startsWith(".akaszt√≥fa stat")) {
            val embed = EmbedBuilder()
                .setTitle("Akaszt√≥fa statisztik√°k (2021. 03. 13. √≥ta)")
                .setDescription("üéÆwin/j√°t√©k, üìïszavak, üíÄakaszt√°sok, +random sz√≥ ha van")
            it.guild.loadMembers().onSuccess { members ->
                for (stat in data.hangmanStats) {
                    if (members.any { m -> m.id == stat.playerId }) {
                        embed.addField(jda.getUserById(stat.playerId)?.asTag, stat.toString(), true)
                    }
                }
            }.onError {
                data.hangmanStats.map { hgs ->
                    embed.addField(jda.getUserById(hgs.playerId)?.asTag, hgs.toString(), true)
                }
            }
            it.channel.sendMessage(embed.build()).queue { msg -> msg.makeRemovable() }
        } else {
            if (data.hangmanGames.any { hg -> hg.channelId == it.channel.id }) {
                val lastHangGame = data.hangmanGames.first { hg -> hg.channelId == it.channel.id }
                it.channel.sendMessage("Az el≈ëz≈ë akaszt√≥fa megold√°sa: ||${lastHangGame.text}||").queue()
                data.hangmanGames.removeIf { hg -> hg.channelId == it.channel.id }
                data.save()
            }
            val param = it.contentRaw.removePrefix(".akaszt√≥fa ").replace("||", "")
                .replace("""\{.*}""".toRegex(), "")
            val mods = if (it.contentRaw.contains('{')) it.contentRaw.split('{')[1].removeSuffix("}") else ""
            it.channel.sendMessage(
                "**Akaszt√≥fa (${it.author.asTag})** `a.<bet≈±>` Pl: `a.k` a kezd√©shez\n```\n${
                    Hangman.toHangedText(
                        param,
                        ""
                    )
                }\n```"
            ).queue { msg ->
                val newGame = Hangman(it.author.id, it.guild.id, it.channel.id, param, mods, msg.id, "")
                data.hangmanGames.add(newGame)
                if (!newGame.toHangedText().contains("-")) {
                    msg.makeRemovable()
                    data.hangmanGames.remove(newGame)
                }
                data.save()
            }
        }
    }.addTag(Command.TAG_GAME)

    Command("""van.*akaszt√≥fa\?.*""", "van a szob√°ban akaszt√≥fa?") {
        val hangGame = data.hangmanGames.firstOrNull { h -> h.guildId == it.guild.id && h.channelId == it.channel.id }
        if (hangGame == null) it.reply("Nem, nincs. √öj j√°t√©khoz √≠rd be, hogy `.akaszt√≥fa`").queue()
    }.setIsTrigger(true)

    Command("""a\.[a-z√°√©√≠√≥√∂≈ë√∫√º≈±?]""", "akaszt√≥fa tipp") {
        val hangGame = data.hangmanGames.first { h -> h.guildId == it.guild.id && h.channelId == it.channel.id }
        hangGame.guess(it)
    }.setIsTrigger(true)
}

fun setNumGuesserGame() {
    Command("sz√°mkital√°l√≥", "gondolok egy sz√°mra") {
        if (it.contentRaw == ".sz√°mkital√°l√≥") {
            it.channel.sendMessage(
                EmbedBuilder()
                    .setTitle("Sz√°mkital√°l√≥ j√°t√©km√≥dok:")
                    .setDescription(
                        "Alap: `.sz√°mkital√°l√≥ <max sz√°m>` pl: `.sz√°mkital√°l√≥ 100`\n" +
                                "Hanna: `.sz√°mkital√°l√≥ hanna` (el√©g nagy kih√≠v√°s)"
                    )
                    .build()
            ).queue { msg -> msg.makeRemovable() }
        } else {
            val param = it.contentRaw.split(" ")[1]
            val introText: String
            val max = if (param == "hanna") Int.MAX_VALUE else param.toInt()
            val n = if (param == "hanna") (Int.MIN_VALUE..Int.MAX_VALUE).random() else (0..max).random()
            introText =
                "Gondoltam egy sz√°mra **${if (max == Int.MAX_VALUE) Int.MIN_VALUE else 0} √©s $max** k√∂z√∂tt. Tipphez √≠rd le sim√°n a sz√°mot chat-re!"
            it.channel.sendMessage(introText).queue { msg ->
                data.numGuesserGames.add(NumGuesser(it.channel.id, msg.id, n, mutableListOf(param)))
            }
        }
    }.addTag(Command.TAG_GAME)

    Command("-{0,1}[0-9]+", "sz√°mkital√°l√≥ tipp") {
        val numGuesser = data.numGuesserGames.first { ng -> ng.channelId == it.channel.id }
        val x = it.contentRaw.toInt()
        numGuesser.guess(it, x)
        it.delete().queue()
    }.setIsTrigger(true)
}